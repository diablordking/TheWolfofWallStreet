
# https://github.com/jakevdp/mpld3/issues/22
# http://nbviewer.ipython.org/gist/aflaxman/988cb466117430e8ba1b
# custom_plugins.ipynb
# https://github.com/jakevdp/mpld3/blob/master/mpld3/js/mpld3.v0.3git.js#L1114


import matplotlib.pyplot as plt
import mpld3
from mpld3 import utils



class FormatTick(mpld3.plugins.PluginBase):  # inherit from PluginBase
    """Format Tick plugin"""
    
    JAVASCRIPT = """
    mpld3.register_plugin("formattick", FormatTick);
    FormatTick.prototype = Object.create(mpld3.Plugin.prototype);
    FormatTick.prototype.constructor = FormatTick;

    //the plugin expects to be passed a property named "id", which in this case is plot div id. 
    //This id is generated by the python script, and we can find it using the utils.get_id utility
    FormatTick.prototype.requiredProps = ["tick_values", "tick_labels", "axid"];

    function FormatTick(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };
    
    FormatTick.prototype.draw = function(){

        //patch #3: change the axis tick value and label
        // FIXME: this is a very brittle way to select the y-axis element

        axid = this.props.axid;
        var ax = this.fig.axes[0];
        var axis = ax.elements[axid];   //axid=0: x-axis; axid=1: y-axis


        tv = this.props.tick_values;
        tl = this.props.tick_labels;


        //test
        tick_labels = d3.scale.threshold().domain(tv).range(tl);
        console.log(tick_labels(0));
        

        // try 1: create a new axis.axis by calling axis.draw()
        axis.props.tickvalues = tv;
        axis.props.tickformat = tl.splice(0, 0, '');
        axis.props.nticks = tv.length;
        //axis.draw();


        axis.axis = d3.svg.axis()
                 .scale(axis.scale)
                 .orient(axis.props.position)
                 .ticks(axis.props.nticks)
                 .tickValues(axis.props.tickvalues)
                 .tickFormat(tick_labels);
        axis.ax.baseaxes.selectAll(".mpld3-xaxis").remove();
        var xaxisg = axis.ax.baseaxes.append("g")
               .attr("transform", axis.transform)
               .attr("class", axis.cssclass)
               .call(axis.axis);

        // d3 nested selections: http://bost.ocks.org/mike/nest/
        xaxisg.selectAll(".tick text")
            .style("text-anchor", "end")
            .attr("dx", "-.8em")
            .attr("dy", ".15em")
            .attr("font-family", "sans-serif")
            .attr("font-size", "10px")
            .attr("transform", function(d) {
                return "rotate(-65)" 
                });

        //console.log(axis.axis);
        //console.log(axis.elem[0][0]);

        // try 2: modify the current axis.axis and reset
        //var labels = this.props.tick_labels;
        //axis.axis.tickFormat(function(d,i){return labels[i];});
        //axis.axis.tickValues(this.props.tick_values);

        // HACK: use reset to redraw figure
        //this.fig.reset();  

    }
    """

    def __init__(self, tick_values, tick_labels, axid):

        #the 'dict_' attribute is created in Python, 
        # then in turn passed to the props attribute in Javascript.

        self.dict_ = {"type": "formattick",
                      "tick_values": tick_values,
                      "tick_labels": tick_labels,
                      "axid": axid
        }



class RotateTick(mpld3.plugins.PluginBase):  # inherit from PluginBase
    """Format Tick plugin"""
    
    JAVASCRIPT = """
    mpld3.register_plugin("rotatetick", RotateTick);
    RotateTick.prototype = Object.create(mpld3.Plugin.prototype);
    RotateTick.prototype.constructor = RotateTick;

    //the plugin expects to be passed a property named "id", which in this case is plot div id. 
    //This id is generated by the python script, and we can find it using the utils.get_id utility
    RotateTick.prototype.requiredProps = ["axid", "tick_labels"];

    function RotateTick(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };
    
    RotateTick.prototype.draw = function(){

        // make the labels rotate 90 degrees
        axid = this.props.axid;
        var ax = this.fig.axes[0];
        var axis = ax.elements[axid];   //axid=0: x-axis; axid=1: y-axis
        

        labels = this.props.tick_labels;
        //console.log(labels)

 
        var xticktext = axis.ax.baseaxes.selectAll('.mpld3-xaxis .tick text').data(labels);
        //console.log(xticktext)
 

        xticktext.style("text-anchor", "end")
            .text(function(d,i){return d;})
            .attr("dx", "-.8em")
            .attr("dy", ".15em")
            .attr("font-family", "sans-serif")
            .attr("font-size", "10pt")
            .attr("transform", function(d) {
                return "rotate(-65)" 
                });
 
    }
    """
    def __init__(self, axid, tick_labels):

        #the 'dict_' attribute is created in Python, 
        # then in turn passed to the props attribute in Javascript.

        self.dict_ = {"type": "rotatetick",
                      "axid": axid,
                      "tick_labels": tick_labels}


if __name__ == '__main__':
    fig, ax = plt.subplots()
    ax.set_yscale('log')
    ax.plot([3,1,4,1,5,9,100,1000], 'ko-', mfc='k', mew=2, mec='w', ms=10)


    # fig, ax = plt.subplots()
    # points = ax.scatter(np.random.rand(50), np.random.rand(50),
    #                 s=500, alpha=0.3)
    # plugins.clear(fig) 
    # plugins.connect(fig, ClickInfo(points))

    tick_values = [1, 100, 1000]
    tick_labels = ['t1', 't2', 't3']
    ax_ori = RotateTick(1, tick_labels)
    mpld3.plugins.connect(fig, ax_ori)
    ax_fmt = FormatTick(tick_values, tick_labels, 1)
    mpld3.plugins.connect(fig, ax_fmt)


    mpld3.show()


class HighlightLines(mpld3.plugins.PluginBase):
    """A plugin to highlight lines on hover"""

    JAVASCRIPT = """
    mpld3.register_plugin("linehighlight", LineHighlightPlugin);
    LineHighlightPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    LineHighlightPlugin.prototype.constructor = LineHighlightPlugin;
    LineHighlightPlugin.prototype.requiredProps = ["line_ids"];
    LineHighlightPlugin.prototype.defaultProps = {alpha_bg:0.3, alpha_fg:1.0}
    function LineHighlightPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    LineHighlightPlugin.prototype.draw = function(){
      for(var i=0; i<this.props.line_ids.length; i++){
         var obj = mpld3.get_element(this.props.line_ids[i], this.fig),
             alpha_fg = this.props.alpha_fg;
             alpha_bg = this.props.alpha_bg;
         obj.elements()
             .on("mouseover", function(d, i){
                            d3.select(this).transition().duration(50)
                              .style("stroke-opacity", alpha_fg); })
             .on("mouseout", function(d, i){
                            d3.select(this).transition().duration(200)
                              .style("stroke-opacity", alpha_bg); });
      }
    };
    """

    def __init__(self, lines):
        self.lines = lines
        self.dict_ = {"type": "linehighlight",
                      "line_ids": [utils.get_id(line) for line in lines],
                      "alpha_bg": lines[0].get_alpha(),
                      "alpha_fg": 1.0}



if __name__ == '__main__':

    #https://mpld3.github.io/examples/random_walk.html

    N_paths = 50
    N_steps = 100

    x = np.linspace(0, 10, 100)
    y = 0.1 * (np.random.random((N_paths, N_steps)) - 0.5)
    y = y.cumsum(1)

    fig, ax = plt.subplots(subplot_kw={'xticks': [], 'yticks': []})
    lines = ax.plot(x, y.T, color='blue', lw=4, alpha=0.1)
    plugins.connect(fig, HighlightLines(lines))

    mpld3.show()
